import{_ as r,r as p,o as c,c as t,a,d as e,b as n,f as o}from"./app-ZOF6ibMC.js";const i={},l=o('<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h1><h2 id="instalar-docker" tabindex="-1"><a class="header-anchor" href="#instalar-docker" aria-hidden="true">#</a> Instalar Docker</h2><h4 id="raspberry-pi" tabindex="-1"><a class="header-anchor" href="#raspberry-pi" aria-hidden="true">#</a> Raspberry PI</h4>',3),d=o(`<summary>Mostrar</summary><blockquote></blockquote><p><em>El primer paso es comprobar que no tenemos ningún paquete instalado desde los repos oficiales de debian</em></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">sudo</span> <span class="token function">apt-get</span> remove <span class="token function">docker</span> docker-engine docker.io containerd runc <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>Descargamos el script proporcionado por la propia Docker y lo ejecutamos para instalarlo</em></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> get.docker.com <span class="token parameter variable">-o</span> get-docker.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sh</span> get-docker.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>Activamos el servicio de Docker</em></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>Añadimos al usuario <code>pi</code> al grupo autorizado para ejecutar Docker</em></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> pi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10),m={href:"https://github.com/docker/machine/releases/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/linuxserver/docker-docker-compose/releases",target:"_blank",rel:"noopener noreferrer"},k=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">cp</span> docker-machine /usr/local/bin/docker-machine <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-machine <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/bin/docker-machine /usr/bin/docker-machine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">cp</span> <span class="token function">docker-compose</span> /usr/local/bin/docker-compose <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/bin/docker-compose /usr/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="compilar-compose" tabindex="-1"><a class="header-anchor" href="#compilar-compose" aria-hidden="true">#</a> Compilar Compose</h4><p><em>Si deseamos compilar la versión de compose para Raspberry Pi,el primer paso es clonar el repo oficial y establecer la ultima rama estable</em></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/docker/compose.git
<span class="token builtin class-name">cd</span> compose
<span class="token function">git</span> checkout <span class="token number">1.29</span>.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Ejecutamos el script para compilar la verión de linux</em></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./script/build/linux
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>Comprobamos en la carpeta <code>dist</code> que tenemos la build y comprobamos la versión compilada</em></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> dist
./docker-compose-Linux-armv7l version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Por ultimo, comprobamos las dependecias que incluye dicho ejecutable</em></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ldd docker-compose-Linux-armv7l
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11),b=a("h2",{id:"portainer",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#portainer","aria-hidden":"true"},"#"),e(" Portainer")],-1),v={href:"https://www.portainer.io/",target:"_blank",rel:"noopener noreferrer"},h=o(`<p><em>Creamos la primera vez un volume para que lo pueda utilizar el contenedor y posteriormente arrancamos la imagen de <code>portainer-ce</code></em></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume create portainer_data <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000 <span class="token parameter variable">--name</span><span class="token operator">=</span>portainer <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token parameter variable">-v</span> portainer_data:/data portainer/portainer-ce:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>Actualizar contenedor de <code>portainer-ce</code> en una sola línea (sin borrar el volume)</em></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> container stop portainer <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> container <span class="token function">rm</span> <span class="token parameter variable">-f</span> portainer <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> image <span class="token function">rm</span> <span class="token parameter variable">-f</span> portainer/portainer-ce:latest <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000 <span class="token parameter variable">--name</span><span class="token operator">=</span>portainer <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token parameter variable">-v</span> portainer_data:/data portainer/portainer-ce:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>Borrar toda la información asociada a <code>portainer-ce</code></em></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> container stop portainer <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> container <span class="token function">rm</span> <span class="token parameter variable">-f</span> portainer <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> volume <span class="token function">rm</span> <span class="token parameter variable">-f</span> portainer_data <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> image <span class="token function">rm</span> <span class="token parameter variable">-f</span> portainer/portainer-ce:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="tips" tabindex="-1"><a class="header-anchor" href="#tips" aria-hidden="true">#</a> Tips</h2><p><em>Limpiar archivos no necesarios de anteriores contenedores. Nota: todos los contenedores han de estar activos, si están parados también borrara la información de dichos contenedores</em></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">df</span> <span class="token parameter variable">-h</span> <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> system prune <span class="token parameter variable">--all</span> <span class="token parameter variable">--force</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">find</span> /var/lib/docker/containers/ <span class="token parameter variable">-type</span> f <span class="token parameter variable">-name</span> “<span class="token punctuation">\\</span>*.log” <span class="token parameter variable">-delete</span> <span class="token operator">&amp;&amp;</span> <span class="token function">df</span> <span class="token parameter variable">-h</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">shutdown</span> <span class="token parameter variable">-r</span> now
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="links" tabindex="-1"><a class="header-anchor" href="#links" aria-hidden="true">#</a> Links</h2>`,10),f={href:"https://www.balena.io/docs/learn/develop/runtime/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://towardsdatascience.com/6d996c574e55",target:"_blank",rel:"noopener noreferrer"},_={href:"https://beixiu.net/dev/docker-compose-external-links",target:"_blank",rel:"noopener noreferrer"},x={href:"https://docs.docker.com/compose/compose-file/compose-versioning/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://gabrieltanner.org/blog/docker-compose",target:"_blank",rel:"noopener noreferrer"};function w(D,C){const s=p("ExternalLinkIcon");return c(),t("div",null,[l,a("details",null,[d,a("p",null,[a("strong",null,[e("Si deseamos lo servicios de machine(opcional) y compose, es necesario descargar la "),a("a",m,[e("ultima versión disponible"),n(s)]),e(", en el caso de Raspberry, no hay release oficial de compose, pero "),a("a",u,[e("linuxsever"),n(s)]),e(" si proporciona versiones de 32 bits para Raspberry. Una vez descargados, los copiamos en la carpeta de ejecutables y cambiamos sus permisos para poder ejectutarlos")])]),k]),b,a("p",null,[a("strong",null,[a("a",v,[e("Portainer"),n(s)]),e(" es una imagen de docker que nos ofrece una UI que podemos utilizar desde el navegador web")])]),h,a("ul",null,[a("li",null,[a("a",f,[e("Communicate outside the container "),n(s)])]),a("li",null,[a("a",g,[e("Connect to MySQL running in Docker container from a local machine"),n(s)])]),a("li",null,[a("a",_,[e("docker-compose 中的 external-links "),n(s)])]),a("li",null,[a("a",x,[e("Docker Compose file versions and upgrading "),n(s)])]),a("li",null,[a("a",y,[e("The definitive Guide to Docker compose"),n(s)])])])])}const L=r(i,[["render",w],["__file","DOCKER.html.vue"]]);export{L as default};
