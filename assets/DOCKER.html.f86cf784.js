import{_ as r,o as c,c as i,a as e,b as n,e as o,d as a,r as t}from"./app.7b59e2c1.js";const p={},l=o('<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h1><h2 id="instalar-docker" tabindex="-1"><a class="header-anchor" href="#instalar-docker" aria-hidden="true">#</a> Instalar Docker</h2><h4 id="raspberry-pi" tabindex="-1"><a class="header-anchor" href="#raspberry-pi" aria-hidden="true">#</a> Raspberry PI</h4>',3),d=o(`<summary>Mostrar</summary><blockquote></blockquote><p><em>El primer paso es comprobar que no tenemos ning\xFAn paquete instalado desde los repos oficiales de debian</em></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> <span class="token function">sudo</span> <span class="token function">apt-get</span> remove <span class="token function">docker</span> docker-engine docker.io containerd runc -y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>Descargamos el script proporcionado por la propia Docker y lo ejecutamos para instalarlo</em></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">curl</span> -fsSL get.docker.com -o get-docker.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sh</span> get-docker.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>Activamos el servicio de Docker</em></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>A\xF1adimos al usuario <code>pi</code> al grupo autorizado para ejecutar Docker</em></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">usermod</span> -aG <span class="token function">docker</span> pi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10),u=a("Si deseamos lo servicios de machine(opcional) y compose, es necesario descargar la "),m={href:"https://github.com/docker/machine/releases/",target:"_blank",rel:"noopener noreferrer"},h=a("ultima versi\xF3n disponible"),k=a(", en el caso de Raspberry, no hay release oficial de compose, pero "),b={href:"https://github.com/linuxserver/docker-docker-compose/releases",target:"_blank",rel:"noopener noreferrer"},v=a("linuxsever"),f=a(" si proporciona versiones de 32 bits para Raspberry. Una vez descargados, los copiamos en la carpeta de ejecutables y cambiamos sus permisos para poder ejectutarlos"),g=o(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">cp</span> docker-machine /usr/local/bin/docker-machine <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-machine <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/bin/docker-machine /usr/bin/docker-machine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">cp</span> <span class="token function">docker-compose</span> /usr/local/bin/docker-compose <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="compilar-compose" tabindex="-1"><a class="header-anchor" href="#compilar-compose" aria-hidden="true">#</a> Compilar Compose</h4><p><em>Si deseamos compilar la versi\xF3n de compose para Raspberry Pi,el primer paso es clonar el repo oficial y establecer la ultima rama estable</em></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/docker/compose.git
<span class="token builtin class-name">cd</span> compose
<span class="token function">git</span> checkout <span class="token number">1.29</span>.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Ejecutamos el script para compilar la veri\xF3n de linux</em></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>./script/build/linux
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>Comprobamos en la carpeta <code>dist</code> que tenemos la build y comprobamos la versi\xF3n compilada</em></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> dist
./docker-compose-Linux-armv7l version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Por ultimo, comprobamos las dependecias que incluye dicho ejecutable</em></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ldd docker-compose-Linux-armv7l
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11),_=e("h3",{id:"portainer",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#portainer","aria-hidden":"true"},"#"),a(" Portainer")],-1),x={href:"https://www.portainer.io/",target:"_blank",rel:"noopener noreferrer"},y=a("Portainer"),w=a(" es una imagen de docker que nos ofrece una UI que podemos utilizar desde el navegador web"),D=o(`<p><em>Creamos la primera vez un volume para que lo pueda utilizar el contenedor y posteriormente arrancamos la imagen de <code>portainer-ce</code></em></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> volume create portainer_data <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> run -d -p <span class="token number">8000</span>:8000 -p <span class="token number">9000</span>:9000 --name<span class="token operator">=</span>portainer --restart<span class="token operator">=</span>always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>Actualizar contenedor de <code>portainer-ce</code> en una sola l\xEDnea (sin borrar el volume)</em></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> container stop portainer <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> container <span class="token function">rm</span> -f portainer <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> image <span class="token function">rm</span> -f portainer/portainer-ce:latest <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> run -d -p <span class="token number">8000</span>:8000 -p <span class="token number">9000</span>:9000 --name<span class="token operator">=</span>portainer --restart<span class="token operator">=</span>always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>Borrar toda la informaci\xF3n asociada a <code>portainer-ce</code></em></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">docker</span> container stop portainer <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> container <span class="token function">rm</span> -f portainer <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> volume <span class="token function">rm</span> -f portainer_data <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> image <span class="token function">rm</span> -f portainer/portainer-ce:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="tips" tabindex="-1"><a class="header-anchor" href="#tips" aria-hidden="true">#</a> Tips</h3><p><em>Limpiar archivos no necesarios de anteriores contenedores. Nota: todos los contenedores han de estar activos, si est\xE1n parados tambi\xE9n borrara la informaci\xF3n de dichos contenedores</em></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">df</span> -h <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> system prune --all --force <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">find</span> /var/lib/docker/containers/ -type f -name \u201C<span class="token punctuation">\\</span>*.log\u201D -delete <span class="token operator">&amp;&amp;</span> <span class="token function">df</span> -h <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">shutdown</span> -r now
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="links" tabindex="-1"><a class="header-anchor" href="#links" aria-hidden="true">#</a> Links</h2>`,10),C={href:"https://www.balena.io/docs/learn/develop/runtime/",target:"_blank",rel:"noopener noreferrer"},q=a("Communicate outside the container "),L={href:"https://towardsdatascience.com/6d996c574e55",target:"_blank",rel:"noopener noreferrer"},E=a("Connect to MySQL running in Docker container from a local machine"),j={href:"https://beixiu.net/dev/docker-compose-external-links",target:"_blank",rel:"noopener noreferrer"},z=a("docker-compose \u4E2D\u7684 external-links "),R={href:"https://docs.docker.com/compose/compose-file/compose-versioning/",target:"_blank",rel:"noopener noreferrer"},I=a("Docker Compose file versions and upgrading "),N={href:"https://gabrieltanner.org/blog/docker-compose",target:"_blank",rel:"noopener noreferrer"},P=a("The definitive Guide to Docker compose");function S(B,V){const s=t("ExternalLinkIcon");return c(),i("div",null,[l,e("details",null,[d,e("p",null,[e("strong",null,[u,e("a",m,[h,n(s)]),k,e("a",b,[v,n(s)]),f])]),g]),_,e("p",null,[e("strong",null,[e("a",x,[y,n(s)]),w])]),D,e("ul",null,[e("li",null,[e("a",C,[q,n(s)])]),e("li",null,[e("a",L,[E,n(s)])]),e("li",null,[e("a",j,[z,n(s)])]),e("li",null,[e("a",R,[I,n(s)])]),e("li",null,[e("a",N,[P,n(s)])])])])}var T=r(p,[["render",S],["__file","DOCKER.html.vue"]]);export{T as default};
